import React, { useState } from 'react';
import Input from '../../../components/ui/Input';
import Textarea from '../../../components/ui/Textarea';
import { Weight, Ruler, Tag, FileText, X } from 'lucide-react';

/**
 * ProductPhysicalSEO - Physical properties and SEO section
 * Fields: weight, dimensions, tags, meta_title, meta_description
 */
const ProductPhysicalSEO = ({ form = {}, onChange, errors = {} }) => {
  const [tagInput, setTagInput] = useState('');
  
  const update = (field, value) => onChange(field, value);

  // Tag management
  const addTag = () => {
    const trimmed = tagInput.trim();
    if (!trimmed) return;
    
    const currentTags = form.tags || [];
    if (currentTags.includes(trimmed)) {
      return; // Already exists
    }
    
    update('tags', [...currentTags, trimmed]);
    setTagInput('');
  };

  const removeTag = (tagToRemove) => {
    const currentTags = form.tags || [];
    update('tags', currentTags.filter(tag => tag !== tagToRemove));
  };

  const handleTagKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addTag();
    }
  };

  // SEO score calculation
  const calculateSEOScore = () => {
    let score = 0;
    let max = 100;
    
    // Meta title (30 points)
    if (form.meta_title) {
      const titleLength = form.meta_title.length;
      if (titleLength >= 30 && titleLength <= 60) score += 30;
      else if (titleLength > 0) score += 15;
    }
    
    // Meta description (30 points)
    if (form.meta_description) {
      const descLength = form.meta_description.length;
      if (descLength >= 120 && descLength <= 160) score += 30;
      else if (descLength > 0) score += 15;
    }
    
    // Tags (20 points)
    const tagCount = (form.tags || []).length;
    if (tagCount >= 3 && tagCount <= 10) score += 20;
    else if (tagCount > 0) score += 10;
    
    // Product name (10 points)
    if (form.name && form.name.length >= 10) score += 10;
    
    // Description (10 points)
    if (form.description && form.description.length >= 100) score += 10;
    
    return { score, max };
  };

  const seoScore = calculateSEOScore();
  const scorePercent = Math.round((seoScore.score / seoScore.max) * 100);
  const scoreColor = scorePercent >= 80 ? 'text-green-600' : scorePercent >= 50 ? 'text-yellow-600' : 'text-red-600';
  const scoreBg = scorePercent >= 80 ? 'bg-green-50' : scorePercent >= 50 ? 'bg-yellow-50' : 'bg-red-50';

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center gap-2 pb-2 border-b">
        <Ruler size={20} className="text-primary" />
        <h3 className="text-lg font-semibold">Thu·ªôc t√≠nh & SEO</h3>
      </div>

      {/* Physical Properties */}
      <div className="bg-card border border-border rounded-lg p-4 space-y-4">
        <h4 className="font-medium flex items-center gap-2">
          <Weight size={16} />
          Thu·ªôc t√≠nh v·∫≠t l√Ω
        </h4>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Weight */}
          <div>
            <Input
              label="C√¢n n·∫∑ng (gam)"
              type="number"
              placeholder="0"
              value={form.weight || ''}
              onChange={(e) => update('weight', Number(e.target.value))}
              error={errors.weight}
              helper="D√πng ƒë·ªÉ t√≠nh ph√≠ v·∫≠n chuy·ªÉn"
              min={0}
            />
            {form.weight > 0 && (
              <div className="mt-1 text-sm text-muted-foreground">
                ‚âà {(form.weight / 1000).toFixed(2)} kg
              </div>
            )}
          </div>

          {/* Dimensions */}
          <div>
            <Input
              label="K√≠ch th∆∞·ªõc (D√óR√óC)"
              type="text"
              placeholder="VD: 20√ó30√ó10 cm"
              value={form.dimensions || ''}
              onChange={(e) => update('dimensions', e.target.value)}
              error={errors.dimensions}
              helper="D√†i √ó R·ªông √ó Cao (cm)"
            />
          </div>
        </div>

        <div className="bg-blue-50 border border-blue-200 rounded p-3 text-sm text-blue-800">
          <div className="font-medium mb-1">üì¶ L∆∞u √Ω v·ªÅ v·∫≠n chuy·ªÉn:</div>
          <ul className="space-y-0.5 ml-4">
            <li>‚Ä¢ C√¢n n·∫∑ng v√† k√≠ch th∆∞·ªõc ·∫£nh h∆∞·ªüng ƒë·∫øn ph√≠ ship</li>
            <li>‚Ä¢ S·∫£n ph·∫©m nh·ªè g·ªçn th∆∞·ªùng ƒë∆∞·ª£c ∆∞u ƒë√£i ph√≠</li>
            <li>‚Ä¢ Nh·∫≠p ch√≠nh x√°c ƒë·ªÉ tr√°nh ph√°t sinh ph√≠</li>
          </ul>
        </div>
      </div>

      {/* Tags */}
      <div className="bg-card border border-border rounded-lg p-4 space-y-4">
        <h4 className="font-medium flex items-center gap-2">
          <Tag size={16} />
          Th·∫ª (Tags)
        </h4>

        {/* Tag Input */}
        <div className="flex gap-2">
          <Input
            placeholder="Nh·∫≠p th·∫ª v√† Enter"
            value={tagInput}
            onChange={(e) => setTagInput(e.target.value)}
            onKeyPress={handleTagKeyPress}
            helper="VD: √°o thun, nam, cotton"
          />
          <button
            type="button"
            onClick={addTag}
            className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"
          >
            Th√™m
          </button>
        </div>

        {/* Tag List */}
        {form.tags && form.tags.length > 0 && (
          <div className="flex flex-wrap gap-2">
            {form.tags.map((tag, idx) => (
              <div
                key={idx}
                className="flex items-center gap-1 px-3 py-1 bg-primary/10 text-primary rounded-full text-sm"
              >
                <Tag size={14} />
                <span>{tag}</span>
                <button
                  type="button"
                  onClick={() => removeTag(tag)}
                  className="ml-1 hover:text-red-600"
                >
                  <X size={14} />
                </button>
              </div>
            ))}
          </div>
        )}

        {(!form.tags || form.tags.length === 0) && (
          <div className="text-sm text-muted-foreground italic">
            Ch∆∞a c√≥ th·∫ª n√†o. Th√™m th·∫ª ƒë·ªÉ tƒÉng kh·∫£ nƒÉng t√¨m ki·∫øm.
          </div>
        )}

        <div className="text-sm text-muted-foreground">
          <span className="font-medium">S·ªë th·∫ª:</span> {(form.tags || []).length}
          <span className="ml-3 text-yellow-600">
            {(form.tags || []).length < 3 && '‚ö†Ô∏è N√™n c√≥ √≠t nh·∫•t 3 th·∫ª'}
            {(form.tags || []).length > 10 && '‚ö†Ô∏è Qu√° nhi·ªÅu th·∫ª (> 10)'}
          </span>
        </div>
      </div>

      {/* SEO Meta */}
      <div className="bg-card border border-border rounded-lg p-4 space-y-4">
        <div className="flex items-center justify-between">
          <h4 className="font-medium flex items-center gap-2">
            <FileText size={16} />
            T·ªëi ∆∞u SEO
          </h4>
          
          {/* SEO Score */}
          <div className={`${scoreBg} px-3 py-1 rounded-full`}>
            <span className={`${scoreColor} font-semibold`}>
              ƒêi·ªÉm SEO: {scorePercent}%
            </span>
          </div>
        </div>

        {/* Meta Title */}
        <div>
          <Input
            label="Ti√™u ƒë·ªÅ SEO (Meta Title)"
            type="text"
            placeholder="VD: √Åo Thun Nam Cotton Cao C·∫•p - ABC Fashion Store"
            value={form.meta_title || ''}
            onChange={(e) => update('meta_title', e.target.value)}
            error={errors.meta_title}
            helper="Hi·ªÉn th·ªã tr√™n k·∫øt qu·∫£ t√¨m ki·∫øm Google"
            maxLength={60}
          />
          <div className="mt-1 text-sm">
            <span className={form.meta_title?.length >= 30 && form.meta_title?.length <= 60 ? 'text-green-600' : 'text-muted-foreground'}>
              {form.meta_title?.length || 0}/60 k√Ω t·ª±
            </span>
            <span className="ml-2 text-muted-foreground">
              (T·ªët nh·∫•t: 30-60 k√Ω t·ª±)
            </span>
          </div>
        </div>

        {/* Meta Description */}
        <div>
          <Textarea
            label="M√¥ t·∫£ SEO (Meta Description)"
            placeholder="VD: √Åo thun nam cotton 100% cao c·∫•p, form regular fit tho·∫£i m√°i. Ch·∫•t li·ªáu th·∫•m h√∫t t·ªët, ƒëa d·∫°ng m√†u s·∫Øc. Giao h√†ng to√†n qu·ªëc."
            value={form.meta_description || ''}
            onChange={(e) => update('meta_description', e.target.value)}
            error={errors.meta_description}
            helper="Hi·ªÉn th·ªã d∆∞·ªõi ti√™u ƒë·ªÅ tr√™n Google"
            rows={3}
            maxLength={160}
          />
          <div className="mt-1 text-sm">
            <span className={form.meta_description?.length >= 120 && form.meta_description?.length <= 160 ? 'text-green-600' : 'text-muted-foreground'}>
              {form.meta_description?.length || 0}/160 k√Ω t·ª±
            </span>
            <span className="ml-2 text-muted-foreground">
              (T·ªët nh·∫•t: 120-160 k√Ω t·ª±)
            </span>
          </div>
        </div>

        {/* SEO Preview */}
        <div className="bg-muted/50 border rounded-lg p-4">
          <div className="text-xs text-muted-foreground mb-2">Xem tr∆∞·ªõc tr√™n Google:</div>
          <div className="space-y-1">
            <div className="text-blue-600 text-lg font-medium">
              {form.meta_title || form.name || 'T√™n s·∫£n ph·∫©m'}
            </div>
            <div className="text-green-700 text-xs">
              https://abc-fashion.com/products/{form.slug || 'san-pham'}
            </div>
            <div className="text-sm text-muted-foreground">
              {form.meta_description || form.short_description || 'M√¥ t·∫£ s·∫£n ph·∫©m s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...'}
            </div>
          </div>
        </div>

        {/* SEO Checklist */}
        <div className="bg-green-50 border border-green-200 rounded p-3 text-sm">
          <div className="font-semibold text-green-900 mb-2">‚úÖ Checklist SEO:</div>
          <ul className="space-y-1 text-green-800">
            <li className={form.meta_title?.length >= 30 && form.meta_title?.length <= 60 ? '' : 'opacity-50'}>
              {form.meta_title?.length >= 30 && form.meta_title?.length <= 60 ? '‚úì' : '‚óã'} Ti√™u ƒë·ªÅ 30-60 k√Ω t·ª±
            </li>
            <li className={form.meta_description?.length >= 120 && form.meta_description?.length <= 160 ? '' : 'opacity-50'}>
              {form.meta_description?.length >= 120 && form.meta_description?.length <= 160 ? '‚úì' : '‚óã'} M√¥ t·∫£ 120-160 k√Ω t·ª±
            </li>
            <li className={(form.tags || []).length >= 3 ? '' : 'opacity-50'}>
              {(form.tags || []).length >= 3 ? '‚úì' : '‚óã'} C√≥ √≠t nh·∫•t 3 th·∫ª
            </li>
            <li className={form.name?.length >= 10 ? '' : 'opacity-50'}>
              {form.name?.length >= 10 ? '‚úì' : '‚óã'} T√™n s·∫£n ph·∫©m r√µ r√†ng
            </li>
            <li className={form.description?.length >= 100 ? '' : 'opacity-50'}>
              {form.description?.length >= 100 ? '‚úì' : '‚óã'} M√¥ t·∫£ chi ti·∫øt ƒë·∫ßy ƒë·ªß
            </li>
          </ul>
        </div>
      </div>

      {/* Quick Tips */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 text-sm">
        <h4 className="font-semibold text-blue-900 mb-2">üí° M·∫πo SEO:</h4>
        <ul className="space-y-1 text-blue-800">
          <li>‚Ä¢ Ti√™u ƒë·ªÅ n√™n c√≥ t·ª´ kh√≥a ch√≠nh s·∫£n ph·∫©m</li>
          <li>‚Ä¢ M√¥ t·∫£ n√™n h·∫•p d·∫´n ƒë·ªÉ tƒÉng t·ª∑ l·ªá click</li>
          <li>‚Ä¢ Th·∫ª gi√∫p kh√°ch h√†ng t√¨m th·∫•y s·∫£n ph·∫©m d·ªÖ h∆°n</li>
          <li>‚Ä¢ SEO t·ªët gi√∫p s·∫£n ph·∫©m l√™n top Google</li>
        </ul>
      </div>
    </div>
  );
};

export default ProductPhysicalSEO;
